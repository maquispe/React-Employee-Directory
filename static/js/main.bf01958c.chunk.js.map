{"version":3,"sources":["utils/API.js","components/EmployeeCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/SearchBar/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeCard","lastName","firstName","email","phone","picture","removeEmployee","id","className","alt","src","onClick","Wrapper","children","Title","SearchBar","handleFormSubmit","search","handleInputChange","onChange","value","name","type","placeholder","App","state","result","filter","filterBy","currentSort","sortField","key","newEmployeeArr","employee","setState","filterEmployees","filterResult","toLowerCase","includes","sort","a","b","event","preventDefault","target","API","then","res","console","log","data","results","map","index","last","first","large","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6WAEe,EACL,WACN,OAAOA,IAAMC,IAAI,kD,MCyBNC,MA1Bf,YAAyF,IAAlEC,EAAiE,EAAjEA,SAAUC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eAAgBC,EAAK,EAALA,GACjF,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAG,UAAKP,EAAL,YAAkBD,GAAYS,IAAKL,KAE7C,yBAAKG,UAAU,WACb,4BACE,4BACE,yCADF,cAC6BN,EAD7B,YAC0CD,IAE1C,4BACE,0CADF,IAC2BE,GAE3B,4BACE,iDADF,IACkCC,KAItC,4BAAQO,QAAS,kBAAML,EAAeC,IAAKC,UAAU,gCAArD,O,MCfSI,MAJf,YAA8B,IAAZC,EAAW,EAAXA,SAChB,OAAO,yBAAKL,UAAU,WAAWK,I,MCGpBC,MAJf,YAA4B,IAAZD,EAAW,EAAXA,SACd,OAAO,wBAAIL,UAAU,SAASK,ICoBjBE,MAtBf,YAAmE,IAA/CC,EAA8C,EAA9CA,iBAAkBC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,kBAC5C,OACE,8BACE,yBAAKV,UAAU,cAEb,2BACEW,SAAUD,EACVE,MAAOH,EACPI,KAAK,SACLC,KAAK,OACLd,UAAU,eACVe,YAAY,YACZhB,GAAG,WAEL,4BAAQI,QAASK,EAAkBR,UAAU,wBAA7C,aCgGOgB,E,4MAtGbC,MAAQ,CACNC,OAAQ,GACRT,OAAQ,GACRU,OAAQ,GACRC,SAAU,WACVC,YAAa,UACbC,UAAW,I,EAqBbxB,eAAiB,SAAAyB,GAEf,IAAMC,EAAiB,EAAKP,MAAMC,OAAOC,QAAO,SAAAM,GAAQ,OAAIA,EAASF,MAAQA,KAE7E,EAAKG,SAAS,CAAER,OAAQM,K,EAG1BG,gBAAkB,SAAAJ,GAChB,IAAMK,EAAe,EAAKX,MAAMC,OAAOC,QAAO,SAAAM,GAAQ,OAAIA,EAAShC,SAASoC,cAAcC,SAASP,EAAIM,kBAEvGD,EAAaG,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEtC,UAAYuC,EAAEvC,UAAa,GAAK,KAE9D,EAAKgC,SAAS,CACZR,OAAQU,K,EAIZpB,iBAAmB,SAAA0B,GACjBA,EAAMC,iBADoB,MAEFD,EAAME,OAAtBvB,EAFkB,EAElBA,KAAMD,EAFY,EAEZA,MAEd,EAAKe,gBAAgBf,GACrB,EAAKc,SAAL,eACGb,EAAQD,IAGX,EAAKe,gBAAgBf,GACrB,EAAKe,gBAAgB,EAAKV,MAAMR,S,EAIlCC,kBAAoB,SAAAwB,GAClBA,EAAMC,iBADqB,MAEHD,EAAME,OAAtBvB,EAFmB,EAEnBA,KAAMD,EAFa,EAEbA,MAEd,EAAKc,SAAL,eACGb,EAAQD,K,kEArDQ,IAAD,OAClByB,IAAaC,MAAK,SAAAC,GAChBC,QAAQC,IAAIF,GACZ,EAAKb,SAAS,CACZR,OAAQqB,EAAIG,KAAKC,QAAQC,KAAI,SAACnB,EAAUoB,GAAX,MAAsB,CACjDpD,SAAUgC,EAASZ,KAAKiC,KACxBpD,UAAW+B,EAASZ,KAAKkC,MACzBpD,MAAO8B,EAAS9B,MAChBC,MAAO6B,EAAS7B,MAChB2B,IAAKsB,EACLhD,QAAS4B,EAAS5B,QAAQmD,UACxBjB,MAAM,SAACC,EAAEC,GAAH,OAAUD,EAAEvC,SAAWwC,EAAExC,SAAY,GAAK,UAGvDwD,OAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,Q,+BA4ClB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,2BACA,yBAAKlD,UAAU,aACb,yBAAKA,UAAU,OACd,yBAAKA,UAAU,aACZ,kBAAC,EAAD,CACAY,MAAOuC,KAAKlC,MAAMR,OAClBD,iBAAkB2C,KAAK3C,iBACvBE,kBAAmByC,KAAKzC,sBAI5B,yBAAKV,UAAU,OACd,YAAImD,KAAKlC,MAAMC,QAAQ0B,KAAI,SAAAnB,GAAQ,OAClC,kBAAC,EAAD,CACA3B,eAAgB,EAAKA,eACrBC,GAAI0B,EAASF,IACbA,IAAKE,EAASF,IACd9B,SAAUgC,EAAShC,SACnBC,UAAW+B,EAAS/B,UACpBC,MAAO8B,EAAS9B,MAChBC,MAAO6B,EAAS7B,MAChBC,QAAS4B,EAAS5B,oB,GA9FZuD,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAEdC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.bf01958c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n  search: () => {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};","import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard({lastName, firstName, email, phone, picture, removeEmployee, id}) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={`${firstName}-${lastName}`} src={picture} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {`${firstName} ${lastName}`}\n          </li>\n          <li>\n            <strong>Email:</strong> {email} \n          </li>\n          <li>\n            <strong>Phone Number:</strong> {phone}\n          </li>\n        </ul>\n      </div>\n      <button onClick={() => removeEmployee(id)} className=\"remove btn btn-sm btn-danger\">\n        X\n      </button>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper({children}) {\n  return <div className=\"wrapper\">{children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title({children}) {\n  return <h1 className=\"title\">{children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\n\nfunction SearchBar({handleFormSubmit, search, handleInputChange}) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        \n        <input \n          onChange={handleInputChange}\n          value={search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\" \n          placeholder=\"Last Name\"\n          id=\"search\"\n        />\n        <button onClick={handleFormSubmit} className=\"btn btn-primary mt-3\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchBar;","import React, { Component } from \"react\";\nimport API from \"./utils/API\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport SearchBar from \"./components/SearchBar\";\n\n\nclass App extends Component {\n  \n  state = {\n    result: [],\n    search: \"\",\n    filter: \"\",\n    filterBy: \"lastName\",\n    currentSort: \"default\",\n    sortField: \"\"\n  };\n\n  \n  componentDidMount() {\n    API.search().then(res => {\n      console.log(res)\n      this.setState({\n        result: res.data.results.map((employee, index) => ({\n          lastName: employee.name.last,\n          firstName: employee.name.first,\n          email: employee.email,\n          phone: employee.phone,\n          key: index,\n          picture: employee.picture.large\n        })).sort( (a,b) => (a.lastName > b.lastName) ? 1 : -1)\n      })\n    })\n    .catch(err => console.log(err));\n  }\n  \n  removeEmployee = key => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const newEmployeeArr = this.state.result.filter(employee => employee.key !== key);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ result: newEmployeeArr });\n  };\n\n  filterEmployees = key => {\n    const filterResult = this.state.result.filter(employee => employee.lastName.toLowerCase().includes(key.toLowerCase()));\n\n    filterResult.sort((a,b) => (a.firstName > b.firstName) ? 1 : -1)\n\n    this.setState({\n      result: filterResult\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    this.filterEmployees(value);\n    this.setState({\n      [name] : value\n    });\n\n    this.filterEmployees(value);\n    this.filterEmployees(this.state.search);\n\n  };\n\n  handleInputChange = event => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    this.setState({\n      [name] : value\n    });\n\n  };\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee Directory</Title>\n        <div className=\"container\">\n          <div className=\"row\">\n           <div className=\"col-lg-12\">  \n              <SearchBar \n              value={this.state.search}\n              handleFormSubmit={this.handleFormSubmit}\n              handleInputChange={this.handleInputChange}\n              />\n            </div> \n          </div>\n          <div className=\"row\">\n          {[...this.state.result].map(employee=> (\n            <EmployeeCard\n            removeEmployee={this.removeEmployee}\n            id={employee.key}\n            key={employee.key}\n            lastName={employee.lastName}\n            firstName={employee.firstName}\n            email={employee.email}\n            phone={employee.phone}\n            picture={employee.picture}\n            />\n            ))}\n          </div>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}